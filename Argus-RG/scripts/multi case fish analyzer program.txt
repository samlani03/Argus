if (NUM_FISH != 1)
{
cat('made by Matthew Scicluna 2014\n')
library(xlsx)
CUTOFF_TIMES_LIST = starttimesvec[,1]
fishfiles = list.files()
db<-list()
length(db)<-length(fishfiles)
functions<-list()
length(functions)<-42
data1 = data.frame()
data2 = data.frame()
data3 = data.frame()
data4 = data.frame()
data5 = data.frame()
data6 = data.frame()
data7 = data.frame()
data8 = data.frame()
data9 = data.frame()
data10 = data.frame()
data11 = data.frame()
data12 = data.frame()
data13 = data.frame()
data14 = data.frame()
data15 = data.frame()
data16 = data.frame()
data17 = data.frame()
data18 = data.frame()
data19 = data.frame()
data20 = data.frame()
data21 = data.frame()
data22 = data.frame()
data23 = data.frame()
data24 = data.frame()
data25 = data.frame()
data26 = data.frame()
data27 = data.frame()
data28 = data.frame()
data29 = data.frame()
data30 = data.frame()
data31 = data.frame()
data32 = data.frame()
data33 = data.frame()
data34 = data.frame()
data35 = data.frame()
data36 = data.frame()
data37 = data.frame()
data38 = data.frame()
data39 = data.frame()
data40 = data.frame()
data41 = data.frame()
data42 = data.frame()

file_index = 1

for (file in fishfiles)
{
if (svalue(tracker)=='RFT')
{source(paste(program_directory,"\\scripts\\RealFishTrackerConverter.txt",sep=''))}

if (SPECIFIC_BIN_START_TIME != 'NONE' & SPECIFIC_BIN_END_TIME != 'NONE' & NUM_BINS == 'NONE' & TIME_OF_BINS == 'NONE') #make a specific bin starting at SPECIFIC_BIN_START_TIME and ending at SPECIFIC_BIN_END_TIME
{min_begin <- as.numeric(SPECIFIC_BIN_START_TIME*framerate*60) #modifies minutes to frame rate
min_end <- as.numeric(SPECIFIC_BIN_END_TIME*framerate*60) #modifies minutes to frame rate
coord = coord[min_begin:min_end,]
bins<-split(as.data.frame(coord),rep(1, each=(length(coord[,1]))))}

if (SPECIFIC_BIN_START_TIME != 'NONE' & SPECIFIC_BIN_END_TIME != 'NONE' & NUM_BINS != 'NONE' & TIME_OF_BINS != 'NONE') #make a specific bin starting at SPECIFIC_BIN_START_TIME and ending at SPECIFIC_BIN_END_TIME
{print('Invalid combination of a specific timebin time interval and minutes or number of bins to analyze')}

if (TIME_OF_BINS == 'NONE' & NUM_BINS == 'NONE' & SPECIFIC_BIN_START_TIME == 'NONE' & SPECIFIC_BIN_END_TIME == 'NONE')
{print('please specify time or length of bin(s) or a specific interval for a bin')}

if (NUM_BINS != 'NONE' & TIME_OF_BINS == 'NONE' & SPECIFIC_BIN_START_TIME == 'NONE' & SPECIFIC_BIN_END_TIME == 'NONE')  # make NUM_BINS number of bins
{
a<-(length(coord[,1])%%NUM_BINS)
if (a!=0){
for (i in (1:a)){coord = coord[-length(coord[,1]), ] }}
bins<-split(as.data.frame(coord),rep(1:NUM_BINS, each=(length(coord[,1])/NUM_BINS)))}

if (TIME_OF_BINS != 'NONE' & NUM_BINS == 'NONE' & SPECIFIC_BIN_START_TIME == 'NONE' & SPECIFIC_BIN_END_TIME == 'NONE') #make bins each of particular time in seconds
{
timev = TIME_OF_BINS*framerate
a<-(length(coord[,1])%%timev)
if (a!=0)
{coord = coord[-length(coord[,1]):-(length(coord[,1])-a+1), ]}
bins<-split(as.data.frame(coord),rep(1:(length(coord[,1])/timev), each=timev))}

if (NUM_BINS != 'NONE' & TIME_OF_BINS != 'NONE' & SPECIFIC_BIN_START_TIME == 'NONE' & SPECIFIC_BIN_END_TIME == 'NONE'){
# make numbins number of bins each timev in length
timev = framerate*TIME_OF_BINS
a<-length(coord[,1])%%(NUM_BINS*timev)
if (length(coord[,1]) < NUM_BINS*timev)
{print('invalid parameters, please lower time of bin(s) or number of bin(s) or both')}
if (length(coord[,1]) >= NUM_BINS*timev){coord = coord[0:(NUM_BINS*timev) , ]}
bins<-split(as.data.frame(coord),rep(1:NUM_BINS, each = timev))
i=1                                                               #ensures bin is right length
while (i <= length(bins))
{bins[[i]]=bins[[i]][1:timev,]
i = i+1}
}

if (OCCLUSIONS=='ON')
{source(paste(program_directory,"\\scripts\\occlusions.txt",sep=''))
bins=lapply(bins,multiocclusionfunct)
}

if (SMOOTH == 'ON')
{source(paste(program_directory,"\\scripts\\smoother.txt",sep=''))
bins=lapply(bins,multismoothfunct)
}

summary <- function(bins) #makes a data summary table that may be useful to other functions...
{xval<-bins[,1]
yval<-bins[,2]
oldx<-as.numeric(xval[-length(xval)])
oldy<-as.numeric(yval[-length(yval)])
number<-as.numeric((1:length(oldx)))
dx<-as.numeric(diff(xval,1)) #change in x coordinate of fish at every timeframe
dy<-as.numeric(diff(yval,1)) #change in y coordinate of fish at every timeframe
movement<-as.numeric(sqrt(dx^2+dy^2)) #movement of fish at each timeframe (using pythagoreas theorem)
speeds<-movement*framerate #the speed of the fish at each timeframe
newx<-as.numeric(c(xval[-1]))
newy<-as.numeric(c(yval[-1]))
turnangle<-as.vector(180/pi)*(acos(oldy/sqrt((oldx^2)+(oldy^2)))-acos(newy/sqrt((newx^2)+(newy^2))))
i = 1 #gives turn angle in degrees
#turnangle = matrix(,length(turnangle),1)
#while (i < length(turnangle)){
#if(turnangle[i]<0){turnangle[i]<-abs(turnangle[i])}
#i = i + 1}
angularvelocity<-turnangle*framerate #angular velocity in deg/sec
changedir<-c(0,((diff(sign(dx)) != 0)|(diff(sign(dy)) !=0))) #proportion of time fish changes direction (dx OR dy vector changes sign)
datasummary<-cbind(number,oldx,oldy,newx,newy,dx,dy,speeds,angularvelocity,changedir)
return(datasummary)}

fishbins<-list()
start <- seq(1, by = 2, length = NUM_FISH)
for (i in 1:length(bins)){
bin<-bins[[i]]
fishbins[[i]] <- lapply(start, function(j) cbind(bin[,j],bin[,j+1]))}

summarymulti<-function(listoffish){
return(lapply(listoffish,summary))}

fishbins<-lapply(fishbins,summarymulti)

#adddistcolumns<-function(bins)
#{matlist=list()
#newlist=c()
#for (i in 1:NUM_BINS){
#matlist[[i]]=matrix(unlist(bins[[i]]), ncol = 10, byrow = FALSE)}
#for (i in 1:NUM_FISH){
#for (j in 1:NUM_FISH){
#dist=sqrt( (matlist[[i]][,2]-matlist[[j]][,2])^2
#+ (matlist[[i]][,3]-matlist[[j]][,3])^2 )
#newlist=cbind(newlist,dist)}
#matlist[[i]]=cbind(matlist[[i]],newlist)
#newlist=c()}
#return(matlist)}

adddistcolumns<-function(fishbins)
{
alldist=list()
distances<-c()
distforfish<-c()
distatbin<-list()
for (j in 1:NUM_BINS){
for (i in 1:NUM_FISH){
for (k in 1:NUM_FISH){
distances=sqrt( (fishbins[[j]][[i]][,2]-fishbins[[j]][[k]][,2])^2
+ (fishbins[[j]][[i]][,3]-fishbins[[j]][[k]][,3])^2 )
distforfish=cbind(distforfish,distances)}
distatbin[[i]]<-distforfish
distforfish<-c()}
alldist[[j]]<-distatbin
distatbin<-list()
}
for (i in 1:NUM_BINS){
for (j in 1:NUM_FISH){
fishbins[[i]][[j]]<-cbind(fishbins[[i]][[j]],alldist[[i]][[j]])
}}
return(fishbins)}


fishbins<-adddistcolumns(fishbins)

if(NUMBER_OF_FACS!=0){
test=matrix(unlist(lapply(starttimesvec[file_index,-1],rep,NUM_FISH)),NUM_FISH)}
if(NUMBER_OF_FACS==0)
{test=c()}

if (IID == 'ON'){
printout <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length  (fishbins))))
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
means=colMeans(fishbins[[i]][[j]][,11:(10+NUM_FISH)])
printout[j,i]=mean(means[means!=0])}}
printout<-cbind(test,printout)
}

if (VIID == 'ON'){
printout2 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list (paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length (fishbins))))
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
means=colMeans(fishbins[[i]][[j]][,11:(10+NUM_FISH)])
means=var(means[means!=0])
printout2[j,i]=means}}
printout2<-cbind(test,printout2)
}

if (NND == 'ON'){
printout3 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list (paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length (fishbins))))
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
means=colMeans(fishbins[[i]][[j]][,11:(10+NUM_FISH)])
means=min(means[means!=0])
printout3[j,i]=means}}
printout3<-cbind(test,printout3)

}

if(ADVANCED=='ON')
{printout4<-c()
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
printout4<-rbind(printout4,rep(paste('fish',j,'from bin',i,'from file',filename),(10+NUM_FISH)),fishbins[[i]][[j]])}}
printout4<-cbind(test,printout4)
}

speed2<-function(bins)
{
speeds<-bins[,8]
speed<-mean(speeds)
varspeed<-sqrt(var(speeds)) #the variance of those speeds
movement<-as.numeric(sqrt(bins[,6]^2+bins[,7]^2))
totaldistance<-sum(movement)
fastest<-tail(sort(speeds),1)
output<-c(totaldistance,speed,varspeed,fastest)


return(output)
}

if (SPEED == 'ON'){

printout5 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout6 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout7 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout8 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
result<-speed2(fishbins[[i]][[j]])
printout5[j,i]<-result[1]
printout6[j,i]<-result[2]
printout7[j,i]<-result[3]
printout8[j,i]<-result[4]}}
printout5<-cbind(test,printout5)
printout6<-cbind(test,printout6)
printout7<-cbind(test,printout7)
printout8<-cbind(test,printout8)
}


if (file_index == 1){
maxlength = length(bins)}

if (file_index > 1){
if (length(bins) > maxlength){
print('please rearrange your files so the one with the most bins in first in the queue')}
}

fix_column_length<-function(printout)
{if (file_index > 1){
while (maxlength > ncol(printout))
{printout = cbind(printout,'.') #to make it more SPSS friendly...
colnames(printout)[ncol(printout)] = paste('bin ' , ncol(printout))}
print(paste('Adding columns to file ', file_index))}
return(printout)}

thigmotaxis2<-function(bins)
{dxp<-sqrt((bins[,2]-THIGMOTAXIS_X_POINT)^2) #distance from point (in x direction)
dyp<-sqrt((bins[,3]-THIGMOTAXIS_Y_POINT)^2) #distance from ymed (in y direction)
distfromp<-sum(sqrt(dxp^2+dyp^2)) #distance of fish from point of tank at each timeframe (using pythagoreas theorem)
return(distfromp/length(dxp))}

if (THIGMOTAXIS == 'ON'){
if (THIGMOTAXIS_X_POINT != 'NONE' & THIGMOTAXIS_Y_POINT != 'NONE'){
printout9 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
result<-thigmotaxis2(fishbins[[i]][[j]])
printout9[j,i]<-result}}
printout9<-cbind(test,printout9)
}
else{print('Please specify x or y coordinate for thigmotaxis function')}
}

timespent<-function(bins)
{movement<-sqrt(bins[,6]^2+bins[,7]^2) #movement of fish at each timeframe (using pythagoreas theorem)
totaltime<- length(bins[,6])/framerate #total time of bin
speeds<-bins[,8] #the speed of the fish at each timeframe
acceleration<-diff(movement,1) #change in speeds between timeframes.
paccel<-sum(acceleration>0)/length(acceleration) #how often fish gained more speed after a timeframe
pspeed1<-sum(speeds<5)/length(speeds) #probability (proportion of time) fish went less than 5cm/s
pspeed2<-sum(speeds>5&speeds<10)/length(speeds)
pspeed3<-sum(speeds>10&speeds<15)/length(speeds)
pspeed4<-sum(speeds>15&speeds<20)/length(speeds)
pspeed5<-sum(speeds>20&speeds<25)/length(speeds)
pspeed6<-sum(speeds>25&speeds<30)/length(speeds)
pspeed7<-sum(speeds>30)/length(speeds)
pstill<-sum(movement==0)/length(speeds) #proportion of time fish did not move between timeframes
pchangedir<-sum(bins[,10]==1)/length(bins[,10]) #proportion of time fish changes direction (dx OR dy vector changes sign)
output<-c(paccel,pstill,pchangedir,pspeed1,pspeed2,pspeed3,pspeed4,pspeed5,
pspeed6,pspeed7)*totaltime
return(output)}

if (TIMESPENT == 'ON'){
printout10 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout11 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout12 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout13 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout14 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout15 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout16 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout17 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout18 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout19 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))

for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
result<-timespent(fishbins[[i]][[j]])
printout10[j,i] <- result[1]
printout11[j,i] <- result[2]
printout12[j,i] <- result[3]
printout13[j,i] <- result[4]
printout14[j,i] <- result[5]
printout15[j,i] <- result[6]
printout16[j,i] <- result[7]
printout17[j,i] <- result[8]
printout18[j,i] <- result[9]
printout19[j,i] <- result[10]}}

printout10<-cbind(test,printout10)
printout11<-cbind(test,printout11)
printout12<-cbind(test,printout12)
printout13<-cbind(test,printout13)
printout14<-cbind(test,printout14)
printout15<-cbind(test,printout15)
printout16<-cbind(test,printout16)
printout17<-cbind(test,printout17)
printout18<-cbind(test,printout18)
printout19<-cbind(test,printout19)
}

distfromsides<-function(bins)
{distfrombottom<-as.numeric(sum(bins[,3])/length(bins[,3]))
distfromtop<-ymax-distfrombottom
distfromleft<-sum(bins[,2])/length(bins[,2])
distfromright<-xmax-distfromleft
output<-c(distfrombottom,distfromtop,distfromleft,distfromright)
return(output)}

if (DISTANCE_FROM_SIDES == 'ON')
{printout20 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout21 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout22 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
printout23 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),paste('bin ', 1:length(bins))))
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
result<-distfromsides(fishbins[[i]][[j]])
printout20[j,i]<-result[1]
printout21[j,i]<-result[2]
printout22[j,i]<-result[3]
printout23[j,i]<-result[4]}}
printout20<-cbind(test,printout20)
printout21<-cbind(test,printout21)
printout22<-cbind(test,printout22)
printout23<-cbind(test,printout23)
}


timeatouter<-function(bins)
{lower5x<-as.numeric((xmax/2)-(PERCENT/200)*xmax) #area representing leftmost PERCENT% of fish tank
upper95x<-as.numeric((xmax/2)+(PERCENT/200)*xmax) #area representing rightmost PERCENT% of fish tank
lower5y<-as.numeric((ymax/2)-(PERCENT/200)*ymax) #area representing upper PERCENT% of fish tank
upper95y<-as.numeric((ymax/2)+(PERCENT/200)*ymax) #area representing bottommost PERCENT% of fish tank
pperiphery<-as.numeric(sum(bins[,2]<=lower5x|bins[,2]>=upper95x|bins[,3]<=lower5y|bins[,3]>=upper95y)/length(bins[,2])) #proportion of time spent in outermost area of fishtank (representing PERCENT% of total area of tank)
output<-as.numeric(pperiphery*(length(bins[,2])/framerate))
return(output)}


if (TIME_AT_OUTER_PERCENT == 'ON')
{
print('here')
printout24 <- matrix(,NUM_FISH,length(bins),byrow=F,dimnames = list(paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length(bins)))))
for (i in 1:length(bins)){
for (j in 1:NUM_FISH){
result<-timeatouter(fishbins[[i]][[j]])
printout24[j,i]<-result[1]}}
printout24<-cbind(test,printout24)
}


params=c(0,0,0,0,0,0) #initialize params

custom<-function(cbins) 
{cbins<-matrix(unlist(cbins), ncol = (10+NUM_FISH), byrow = FALSE)
IN_P=params[1]
OUT_P=params[2]
MIN_S=params[3]
MAX_S=params[4]
CUST_TURN=params[5]
CUST_TIME=params[6]
number=cbins[,1]
oldx=cbins[,2]
oldy=cbins[,3]
speeds=cbins[,8]
changedir=cbins[,10]
lowerxin<-(xmax/2)-(IN_P/200)*xmax #area representing leftmost IN_P%   of fish tank
upperxin<-(xmax/2)+(IN_P/200)*xmax #area representing rightmost IN_P%   of fish tank
loweryin<-(ymax/2)-(IN_P/200)*ymax #area representing upper IN_P% of   fish tank
upperyin<-(ymax/2)+(IN_P/200)*ymax #area representing bottommost IN_P%   of fish tank

lowerxout<-(xmax/2)-(OUT_P/200)*xmax #area representing leftmost   OUT_P% of fish tank
upperxout<-(xmax/2)+(OUT_P/200)*xmax #area representing rightmost   OUT_P% of fish tank
loweryout<-(ymax/2)-(OUT_P/200)*ymax #area representing upper OUT_P%   of fish tank
upperyout<-(ymax/2)+(OUT_P/200)*ymax #area representing bottommost   OUT_P% of fish tank

#customsubset<-subset(cbins,cbins[,8]>=MIN_S & cbins[,8]<=MAX_S & (oldx>=lowerxin|oldx<=upperxin|oldy>=loweryin|oldy<=upperyin) &   (cbins[,2]<=lowerxout|cbins[,2]>=upperxout|cbins[,3]<=loweryout|cbins[,3]>=upperyout))[,1]

customsubset<-subset(cbins, speeds>=MIN_S & speeds<=MAX_S &   (oldx>=lowerxin|oldx<=upperxin|oldy>=loweryin|oldy<=upperyin) &   (oldx<=lowerxout|oldx>=upperxout|oldy<=loweryout|oldy>=upperyout))[,1]
customsubset<-cbind(customsubset,subset(cbins, speeds>=MIN_S   & speeds<=MAX_S & (oldx>=lowerxin|oldx<=upperxin|oldy>=loweryin|  oldy<=upperyin) & (oldx<=lowerxout|oldx>=upperxout|oldy<=loweryout|  oldy>=upperyout), select = changedir)[,10])
k=1
w=1
turncount=1
starts=c()
ends=c()
durations = c()
while (w < length(customsubset[,1])-1)
{while (customsubset[w,1] == customsubset[w+1,1]-1 & w<length  (customsubset[,1])-1)
{if(customsubset[w,2] == 1)
{turncount=turncount+1}
k=k+1
w=w+1
}
if (k>floor(framerate*CUST_TIME) & turncount >= CUST_TURN)
{starts=c(starts,(customsubset[w]-k)/framerate)
ends = c(ends,customsubset[w]/framerate)
durations = c(durations, k/framerate)}
w = w + 1
k = 1
turncount = 1
}
return(cbind(starts,ends,durations))
}


if (FREEZING == 'ON')
#fish not moving within PERCENTAGE% of fishtank for   NUM_SECONDS_FREEZING seconds
{

printout25 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
printout26 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
params=c(100,PERCENTAGE_TANK_FREEZING,0,0.05,0,NUM_SECONDS_FREEZING)
freezelist<-list()
length(freezelist)<-length(fishbins)

maxnum2=0

for (i in 1:length(fishbins)){

for (j in 1:NUM_FISH){

result<-custom(fishbins[[i]][[j]])
#SA Code Changed old line read length(freezelist)<-5
length(freezelist)<-length(fishbins)



if (!is.null(result))
{freezelist[[i]][[j]]<-result}

printout25[j,i]<-length(result[,1])

if (printout25[j,i]>maxnum2)
{maxnum2=printout25[j,i]}
printout26[j,i]<-sum(result[,3])
}

#issue here (MS)
#SA code changed old line was <-5 for the next two lines
length(freezelist[[i]])<-length(fishbins)}
length(freezelist)<-length(fishbins)


printout25<-cbind(test,printout25)
printout26<-cbind(test,printout26)

if (DETAILS=='ON')
{printout27 <- matrix(,maxnum2,3*NUM_FISH*length(freezelist),
byrow=F,dimnames = list(rep(paste(filename),maxnum2),
paste(paste(c('Start Time for Fish','End Time for Fish','Total   Duration for Fish'),
sort(rep(1:length(freezelist),3))),'in bin',sort(rep   (1:NUM_FISH,(3*length(freezelist)))))))
indexy=1
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
if(!is.null(freezelist[[i]][[j]]))
{t1<-freezelist[[i]][[j]][,1]
length(t1)<-maxnum2
t2<-freezelist[[i]][[j]][,2]
length(t2)<-maxnum2
t3<-freezelist[[i]][[j]][,3]
length(t3)<-maxnum2
printout27[,((indexy*3)-2):(3*indexy)]<-as.numeric(cbind(t1,t2,t3))
}
indexy=indexy+1
}}
}}

if (FLOATING=='ON')
{printout28 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
printout29 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
params=c(PERCENTAGE_TANK_FLOATING,0,0,0.05,0,NUM_SECONDS_FLOATING)
freezelist<-list()
length(freezelist)<-length(fishbins)

maxnum2=0
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
result<-custom(fishbins[[i]][[j]])
length(freezelist)<-5
if (!is.null(result))
{freezelist[[i]][[j]]<-result}
printout28[j,i]<-length(result[,1])
if (printout28[j,i]>maxnum2)
{maxnum2=printout25[j,i]}
printout29[j,i]<-sum(result[,3])
}
length(freezelist[[i]])<-5}
length(freezelist)<-5

printout28<-cbind(test,printout28)
printout29<-cbind(test,printout29)

if (DETAILS=='ON')
{printout30 <- matrix(,maxnum2,3*NUM_FISH*length(freezelist),
byrow=F,dimnames = list(rep(paste(filename),maxnum2),
paste(paste(c('Start Time for Fish','End Time for Fish','Total   Duration for Fish'),
sort(rep(1:length(freezelist),3))),'in bin',sort(rep   (1:NUM_FISH,(3*length(freezelist)))))))
indexy=1
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
if(!is.null(freezelist[[i]][[j]]))
{t1<-freezelist[[i]][[j]][,1]
length(t1)<-maxnum2
t2<-freezelist[[i]][[j]][,2]
length(t2)<-maxnum2
t3<-freezelist[[i]][[j]][,3]
length(t3)<-maxnum2
printout30[,((indexy*3)-2):(3*indexy)]<-as.numeric(cbind(t1,t2,t3))
}
indexy=indexy+1
}}
}}

if (LEAPING=='ON')
{printout31 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
printout32 <- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
params=c(100,0,SPEED_EXCEEDED_LEAPING,10000,0,SECONDS_LEAPING)
freezelist<-list()
length(freezelist)<-length(fishbins)

maxnum2=0
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
result<-custom(fishbins[[i]][[j]])
length(freezelist)<-5
if (!is.null(result))
{freezelist[[i]][[j]]<-result}
printout31[j,i]<-length(result[,1])
if (printout31[j,i]>maxnum2)
{maxnum2=printout31[j,i]}
printout32[j,i]<-sum(result[,3])
}
length(freezelist[[i]])<-5}
length(freezelist)<-5

printout31<-cbind(test,printout31)
printout32<-cbind(test,printout32)

if (DETAILS=='ON')
{printout33 <- matrix(,maxnum2,3*NUM_FISH*length(freezelist),
byrow=F,dimnames = list(rep(paste(filename),maxnum2),
paste(paste(c('Start Time for Fish','End Time for Fish','Total   Duration for Fish'),
sort(rep(1:length(freezelist),3))),'in bin',sort(rep   (1:NUM_FISH,(3*length(freezelist)))))))
indexy=1
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
if(!is.null(freezelist[[i]][[j]]))
{t1<-freezelist[[i]][[j]][,1]
length(t1)<-maxnum2
t2<-freezelist[[i]][[j]][,2]
length(t2)<-maxnum2
t3<-freezelist[[i]][[j]][,3]
length(t3)<-maxnum2
printout33[,((indexy*3)-2):(3*indexy)]<-as.numeric(cbind(t1,t2,t3))
}
indexy=indexy+1
}}
}}


if (ERRATIC=='ON')
{printout34<- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
printout35<- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
params=c(PERCENTILE_OF_TANK_ERRATIC,0,SPEED_ERRATIC,10000,NUM_TURNS_ERRATIC,SECONDS_ERRATIC)
freezelist<-list()
length(freezelist)<-length(fishbins)

maxnum2=0
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
result<-custom(fishbins[[i]][[j]])
length(freezelist)<-length(fishbins)
if (!is.null(result))
{freezelist[[i]][[j]]<-result}
printout34[j,i]<-length(result[,1])
if (printout34[j,i]>maxnum2)
{maxnum2=printout34[j,i]}
printout35[j,i]<-sum(result[,3])
}


length(freezelist[[i]])<-length(fishbins)}
length(freezelist)<-length(fishbins)

printout34<-cbind(test,printout34)
printout35<-cbind(test,printout35)


if (DETAILS=='ON')
{printout36 <- matrix(,maxnum2,3*NUM_FISH*length(freezelist),
byrow=F,dimnames = list(rep(paste(filename),maxnum2),
paste(paste(c('Start Time for Fish','End Time for Fish','Total   Duration for Fish'),
sort(rep(1:length(freezelist),3))),'in bin',sort(rep   (1:NUM_FISH,(3*length(freezelist)))))))
indexy=1
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
if(!is.null(freezelist[[i]][[j]]))
{t1<-freezelist[[i]][[j]][,1]
length(t1)<-maxnum2
t2<-freezelist[[i]][[j]][,2]
length(t2)<-maxnum2
t3<-freezelist[[i]][[j]][,3]
length(t3)<-maxnum2
printout36[,((indexy*3)-2):(3*indexy)]<-as.numeric(cbind(t1,t2,t3))
}
indexy=indexy+1
}}
}}

if (THRASHING=='ON')
{printout37<- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
printout38<- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
params=c(100,THRASHING_PERCENTILE,0,10000,NUM_TURNS_THRASHING,SECONDS_THRASHING)
freezelist<-list()
length(freezelist)<-length(fishbins)

maxnum2=0
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
result<-custom(fishbins[[i]][[j]])
length(freezelist)<-5
if (!is.null(result))
{freezelist[[i]][[j]]<-result}
printout37[j,i]<-length(result[,1])
if (printout37[j,i]>maxnum2)
{maxnum2=printout34[j,i]}
printout38[j,i]<-sum(result[,3])
}
length(freezelist[[i]])<-5}
length(freezelist)<-5

printout37<-cbind(test,printout37)
printout38<-cbind(test,printout38)

if (DETAILS=='ON')
{printout39 <- matrix(,maxnum2,3*NUM_FISH*length(freezelist),
byrow=F,dimnames = list(rep(paste(filename),maxnum2),
paste(paste(c('Start Time for Fish','End Time for Fish','Total   Duration for Fish'),
sort(rep(1:length(freezelist),3))),'in bin',sort(rep   (1:NUM_FISH,(3*length(freezelist)))))))
indexy=1
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
if(!is.null(freezelist[[i]][[j]]))
{t1<-freezelist[[i]][[j]][,1]
length(t1)<-maxnum2
t2<-freezelist[[i]][[j]][,2]
length(t2)<-maxnum2
t3<-freezelist[[i]][[j]][,3]
length(t3)<-maxnum2
printout39[,((indexy*3)-2):(3*indexy)]<-as.numeric(cbind(t1,t2,t3))
}
indexy=indexy+1
}}
}}


if (CUSTOM=='ON')
{printout40<- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
printout41<- matrix(,NUM_FISH,length(fishbins),byrow=F,dimnames = list  (paste(paste(filename),'fish',1:NUM_FISH),c(paste('bin ', 1:length  (bins)))))
params=c(MIN_PERCENTILE,MAX_PERCENTILE,MIN_SPEED_CUST,MAX_SPEED_CUST,CUST_TURN,CUST_TIME)
freezelist<-list()
length(freezelist)<-length(fishbins)

maxnum2=0
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
result<-custom(fishbins[[i]][[j]])
length(freezelist)<-5
if (!is.null(result))
{freezelist[[i]][[j]]<-result}
printout40[j,i]<-length(result[,1])
if (printout40[j,i]>maxnum2)
{maxnum2=printout34[j,i]}
printout41[j,i]<-sum(result[,3])
}
length(freezelist[[i]])<-5}
length(freezelist)<-5

printout40<-cbind(test,printout40)
printout41<-cbind(test,printout41)

if (DETAILS=='ON')
{printout42 <- matrix(,maxnum2,3*NUM_FISH*length(freezelist),
byrow=F,dimnames = list(rep(paste(filename),maxnum2),
paste(paste(c('Start Time for Fish','End Time for Fish','Total   Duration for Fish'),
sort(rep(1:length(freezelist),3))),'in bin',sort(rep   (1:NUM_FISH,(3*length(freezelist)))))))
indexy=1
for (i in 1:length(fishbins)){
for (j in 1:NUM_FISH){
if(!is.null(freezelist[[i]][[j]]))
{t1<-freezelist[[i]][[j]][,1]
length(t1)<-maxnum2
t2<-freezelist[[i]][[j]][,2]
length(t2)<-maxnum2
t3<-freezelist[[i]][[j]][,3]
length(t3)<-maxnum2
printout42[,((indexy*3)-2):(3*indexy)]<-as.numeric(cbind(t1,t2,t3))
}
indexy=indexy+1
}}
}}



if (IID == 'ON')
{data1 = rbind(data1, fix_column_length(printout))}
if (VIID == 'ON')
{data2 = rbind(data2,fix_column_length(printout2))}
if (NND == 'ON')
{data3 = rbind(data3,fix_column_length(printout3))}
if (ADVANCED == 'ON')
{data4 = rbind(data4,fix_column_length(printout4))}


if (SPEED == 'ON')
{data5 = rbind(data5,fix_column_length(printout5))
data6 = rbind(data6,fix_column_length(printout6))
data7 = rbind(data7,fix_column_length(printout7))
data8 = rbind(data8,fix_column_length(printout8))}
if (THIGMOTAXIS == 'ON')
{data9 = rbind(data9,fix_column_length(printout9))}
if (TIMESPENT == 'ON')
{data10 = rbind(data10,fix_column_length(printout10))
data11 = rbind(data11,fix_column_length(printout11))
data12 = rbind(data12,fix_column_length(printout12))
data13 = rbind(data13,fix_column_length(printout13))
data14 = rbind(data14,fix_column_length(printout14))
data15 = rbind(data15,fix_column_length(printout15))
data16 = rbind(data16,fix_column_length(printout16))
data17 = rbind(data17,fix_column_length(printout17))
data18 = rbind(data18,fix_column_length(printout18))
data19 = rbind(data19,fix_column_length(printout19))}
if (DISTANCE_FROM_SIDES == 'ON')
{data20 = rbind(data20,fix_column_length(printout20))
data21 = rbind(data21,fix_column_length(printout21))
data22 = rbind(data22,fix_column_length(printout22))
data23 = rbind(data23,fix_column_length(printout23))}
if (TIME_AT_OUTER_PERCENT == 'ON')
{data24 = rbind(data24,fix_column_length(printout24))}

if (FREEZING == 'ON')
{data25 = rbind(data25,fix_column_length(printout25))
data26 = rbind(data26,fix_column_length(printout26))
if (DETAILS == 'ON')
{data27 = rbind(data27,fix_column_length(printout27))}}

if (FLOATING == 'ON')
{data28 = rbind(data28,fix_column_length(printout28))
data29 = rbind(data29,fix_column_length(printout29))
if (DETAILS == 'ON')
{data30 = rbind(data30,fix_column_length(printout30))}}

if (LEAPING == 'ON')
{data31 = rbind(data31,fix_column_length(printout31))
data32 = rbind(data32,fix_column_length(printout32))
if (DETAILS == 'ON')
{data33 = rbind(data33,fix_column_length(printout33))}
}

if (ERRATIC == 'ON')
{data34 = rbind(data34,fix_column_length(printout34))
data35 = rbind(data35,fix_column_length(printout35))
if (DETAILS == 'ON')
{data36 = rbind(data36,fix_column_length(printout36))}
}

if (THRASHING == 'ON')
{data37 = rbind(data37,fix_column_length(printout37))
data38 = rbind(data38,fix_column_length(printout38))
if (DETAILS == 'ON')
{data39 = rbind(data39,fix_column_length(printout39))}
}

if (CUSTOM == 'ON')
{data40 = rbind(data40,fix_column_length(printout40))
data41 = rbind(data41,fix_column_length(printout41))
if (DETAILS == 'ON')
{data42 = rbind(data42,fix_column_length(printout42))}
}

glabel(paste('processed file', file_index , 'of', length(fishfiles)),container=textwindow)
db[[file_index]]<-fishbins
file_index = file_index + 1
}


if (EXCEL == 'ON')
{write.xlsx(x = fishfiles, file = "output.excelfile.xlsx",sheetName = "List of Files", row.names = TRUE)

if (IID == 'ON'){
write.xlsx(x = data1, file = "output.excelfile.xlsx",sheetName = "IID", row.names = TRUE,append=T)}

if (VIID == 'ON'){
write.xlsx(x = data2, file = "output.excelfile.xlsx",sheetName = "VIID", row.names = TRUE, append=T)}

if (NND == 'ON'){
write.xlsx(x = data3, file = "output.excelfile.xlsx",sheetName = "NND", row.names = TRUE, append=T)}

if (ADVANCED == 'ON')
{write.xlsx(x = data4, file = "Advancedoutput.excelfile.xlsx",sheetName = "Advanced", row.names = TRUE)}


if (SPEED == 'ON'){
write.xlsx(x = data5, file = "output.excelfile.xlsx",sheetName = "Distance Travelled", row.names = TRUE, append=T)
write.xlsx(x = data6, file = "output.excelfile.xlsx",sheetName = "Average Speed", row.names = TRUE, append=T)
write.xlsx(x = data7, file = "output.excelfile.xlsx",sheetName = "Standard Deviation of Speed", row.names = TRUE, append=T)
write.xlsx(x = data8, file = "output.excelfile.xlsx",sheetName = "Top Speed", row.names = TRUE, append=T)}

if (THIGMOTAXIS == 'ON'){
write.xlsx(x = data9, file = "output.excelfile.xlsx",sheetName = "Thigmotaxis", row.names = TRUE, append=T)}

if (TIMESPENT == 'ON')
{write.xlsx(x = data10, file = "output.excelfile.xlsx",sheetName = "Time spent accelerating", row.names = TRUE, append=T)
write.xlsx(x = data11, file = "output.excelfile.xlsx",sheetName = "Time spent still", row.names = TRUE, append=T)
write.xlsx(x = data12, file = "output.excelfile.xlsx",sheetName = "Time spent changing direction", row.names = TRUE, append=T)
write.xlsx(x = data13, file = "output.excelfile.xlsx",sheetName = "Time spent at 0-5 cm per sec", row.names = TRUE, append=T)
write.xlsx(x = data14, file = "output.excelfile.xlsx",sheetName = "Time spent at 5-10 cm per sec", row.names = TRUE, append=T)
write.xlsx(x = data15, file = "output.excelfile.xlsx",sheetName = "Time spent at 10-15 cm per sec", row.names = TRUE, append=T)
write.xlsx(x = data16, file = "output.excelfile.xlsx",sheetName = "Time spent at 15-20 cm per sec", row.names = TRUE, append=T)
write.xlsx(x = data17, file = "output.excelfile.xlsx",sheetName = "Time spent at 20-25 cm per sec", row.names = TRUE, append=T)
write.xlsx(x = data18, file = "output.excelfile.xlsx",sheetName = "Time spent at 25-30 cm per sec", row.names = TRUE, append=T)
write.xlsx(x = data19, file = "output.excelfile.xlsx",sheetName = "Time spent at 30+ cm per sec", row.names = TRUE, append=T)}

if (DISTANCE_FROM_SIDES == 'ON')
{write.xlsx(x = data20, file = "output.excelfile.xlsx",sheetName = "Distance from bottom", row.names = TRUE, append=T)
write.xlsx(x = data21, file = "output.excelfile.xlsx",sheetName = "Distance from top", row.names = TRUE, append=T)
write.xlsx(x = data22, file = "output.excelfile.xlsx",sheetName = "Distance from left", row.names = TRUE, append=T)
write.xlsx(x = data23, file = "output.excelfile.xlsx",sheetName = "Distance from right", row.names = TRUE, append=T)}

if (TIME_AT_OUTER_PERCENT == 'ON')
{write.xlsx(x = data24, file = "output.excelfile.xlsx",sheetName = "Time at outer percent", row.names = TRUE, append=T)}

if (FREEZING == 'ON')
{write.xlsx(x = data25, file = "output.excelfile.xlsx",sheetName = "Number of Times Freezing", row.names = TRUE, append=T)
write.xlsx(x = data26, file = "output.excelfile.xlsx",sheetName = "Seconds Spent Freezing", row.names = TRUE, append=T)}

if (FLOATING == 'ON')
{write.xlsx(x = data28, file = "output.excelfile.xlsx",sheetName = "Number of Times Floating", row.names = TRUE, append=T)
write.xlsx(x = data29, file = "output.excelfile.xlsx",sheetName = "Seconds Spent Floating", row.names = TRUE, append=T)}

if (LEAPING == 'ON')
{write.xlsx(x = data31, file = "output.excelfile.xlsx",sheetName = "Number Of Times Leaping", row.names = TRUE, append=T)
write.xlsx(x = data32, file = "output.excelfile.xlsx",sheetName = "Seconds Spent Leaping", row.names = TRUE, append=T)}

if (ERRATIC == 'ON')
{write.xlsx(x = data34, file = "output.excelfile.xlsx",sheetName = "Number of Times Erratic", row.names = TRUE, append=T)
write.xlsx(x = data35, file = "output.excelfile.xlsx",sheetName = "Seconds Spent Erratic", row.names = TRUE, append=T)}

if (THRASHING == 'ON')
{write.xlsx(x = data37, file = "output.excelfile.xlsx",sheetName = "Number of Times Thrashing", row.names = TRUE, append=T)
write.xlsx(x = data38, file = "output.excelfile.xlsx",sheetName = "Seconds Spent Thrashing", row.names = TRUE, append=T)}

if (CUSTOM == 'ON')
{write.xlsx(x = data40, file = "output.excelfile.xlsx",sheetName = "Number of Times Doing Custom Behavior", row.names = TRUE, append=T)
write.xlsx(x = data41, file = "output.excelfile.xlsx",sheetName = "Seconds Spent Doing Custom Behavior", row.names = TRUE, append=T)}

if (DETAILS == 'ON')
{write.xlsx(x = fishfiles, file = "Detailedoutput.excelfile.xlsx",sheetName = "Detailed Behavior", row.names = TRUE)
if (FREEZING == 'ON')
{if(length(data27)!=0)
{write.xlsx(x = data27, file = "Detailedoutput.excelfile.xlsx",sheetName = "Freezing Details", row.names = TRUE, append=T)}}
if (FLOATING == 'ON')
{if(length(data30)!=0)
{write.xlsx(x = data30, file = "Detailedoutput.excelfile.xlsx",sheetName = "Floating Details", row.names = TRUE, append=T)}}
if (LEAPING == 'ON')
{if(length(data33)!=0)
{write.xlsx(x = data33, file = "Detailedoutput.excelfile.xlsx",sheetName = "Leaping Details", row.names = TRUE, append=T)}}
if (ERRATIC == 'ON')
{if(length(data36)!=0)
{write.xlsx(x = data36, file = "Detailedoutput.excelfile.xlsx",sheetName = "Erratic Details", row.names = TRUE, append=T)}}
if (THRASHING == 'ON')
{if(length(data39)!=0)
{write.xlsx(x = data39, file = "Detailedoutput.excelfile.xlsx",sheetName = "Thrashing Details", row.names = TRUE, append=T)}}
if (CUSTOM == 'ON')
{if(length(data42)!=0)
{write.xlsx(x = data42, file = "Detailedoutput.excelfile.xlsx",sheetName = "Custom Behavior Details", row.names = TRUE, append=T)}}
}
}

glabel(paste('your file is available at,', getwd()),container=textwindow)
#rm(list=ls(all=TRUE))

functions[[1]]<-data1
functions[[2]]<-data2
functions[[3]]<-data3
functions[[4]]<-data4
functions[[5]]<-data5
functions[[6]]<-data6
functions[[7]]<-data7
functions[[8]]<-data8
functions[[9]]<-data9
functions[[10]]<-data10
functions[[11]]<-data11
functions[[12]]<-data12
functions[[13]]<-data13
functions[[14]]<-data14
functions[[15]]<-data15
functions[[16]]<-data16
functions[[17]]<-data17
functions[[18]]<-data18
functions[[19]]<-data19
functions[[20]]<-data20
functions[[21]]<-data21
functions[[22]]<-data22
functions[[23]]<-data23
functions[[24]]<-data24
functions[[25]]<-data25
functions[[26]]<-data26
functions[[27]]<-data27
functions[[28]]<-data28
functions[[29]]<-data29
functions[[30]]<-data30
functions[[31]]<-data31
functions[[32]]<-data32
functions[[33]]<-data33
functions[[34]]<-data34
functions[[35]]<-data35
functions[[36]]<-data36
functions[[37]]<-data37
functions[[38]]<-data38
functions[[39]]<-data39
functions[[40]]<-data40
functions[[41]]<-data41
functions[[42]]<-data42
}
